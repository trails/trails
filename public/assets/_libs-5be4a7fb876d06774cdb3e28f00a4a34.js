// Function composition utilities
// Composed function will run provided filter (with same arguments as original) and only call the original function if the filter returns true.
function $S(){return new SelectedElements($A(arguments))}Function.prototype.filter=function(e){var t=this;return function(){if(e.apply(this,arguments))return t.apply(this,arguments)}},Function.prototype.before=function(e){var t=this;return function(){return e.apply(this,arguments),t.apply(this,arguments)}},Function.prototype.after=function(e){var t=this;return function(){var n=t.apply(this,arguments);return e.apply(this,arguments),n}},Function.prototype.functionize=Function.prototype.functionize||function(){if(this._functionized)return this._functionized;var e=this;return this._functionized=function(){var t=$A(arguments);return e.apply(t.shift(),t)}};var ArgumentPlaceholder=Class.create({initialize:function(e){this.index=e},mappedArg:function(e){return e[this.index]},_extend:function(e,t){var n=new this.constructor(this.index),r=this.mappedArg;return n.mappedArg=function(n){return e.apply(this,[r.call(this,n)].concat(t))},n}});ArgumentProcessors={invoke:function(e,t){return e[t].apply(e,$A(arguments).slice(2))},pluck:function(e,t){return e[t]}};for(m in ArgumentProcessors)ArgumentPlaceholder.prototype[m]=function(e){return this._extend(e,$A(arguments).slice(1))}.curry(ArgumentProcessors[m]);$R(1,9).each(function(e){window["$"+e]=new ArgumentPlaceholder(e-1)}),$iterator=new ArgumentPlaceholder,$iterator.withVal=function(e){var t=new ArgumentPlaceholder;return t.mappedArg=function(){return e},t},Function.prototype.argMap=function(){var e=this,t=$A(arguments),n=t.indexOf($iterator),r=function(e){return e.mappedArg&&e.mappedArg(this)||e},i=function(){return e.apply(this,t.collect(r,arguments))};return n>=0?function(e){return t[n]=t[n].withVal(e),i}:i};var SelectedElements=Class.create({initialize:function(){this.elements=[],this.selectors=[],$A(arguments).each(this._add,this)},_add:function(e){Object.isArray(e)&&e.each(this._add,this),Object.isElement(e)&&this.elements.push(e),Object.isString(e)&&this.selectors.push(e)},observe:function(e){var t=$A(arguments).slice(1);return t.each(function(t){this.elements.invoke("observe",e,t),this.selectors.collect(Element.match.argMap($1.invoke("element"),$iterator),Element.match).collect(t.filter,t).each(document.observe.curry(e))},this),this},initWith:function(e){var t=e.element();console.log("init!",this,e,t,arguments)}});